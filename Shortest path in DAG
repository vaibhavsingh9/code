// incomplete code


class Solution {
    
    static void dfs(int s, boolean vis[], ArrayList<ArrayList<Integer>> adj, Stack<Integer> st) {
        vis[s] = true; 
        for(int it: adj.get(s)) 
        {
            if(vis[it]==false) 
            {
                dfs(it, vis, adj, st); 
            } 
        }
        
       st.push(s); 
    }
    
    
    static int[] shortest_path(int s,int N, ArrayList<ArrayList<Integer>> adj) 
    {
        Stack<Integer> st = new Stack<Integer>(); // stack for topological sort
        
        boolean vis[] = new boolean[N]; 
        
        for(int i = 0;i<N;i++) 
        {
            if(vis[i] == false) // if not visited
            {
                dfs(i, vis, adj, st);
            }
        }
        
        int dist[] = new int[N];
        
        for(int i=0;i<N;i++)
        dist[i]=Integer.MAX_VALUE;
        
        dist[s]=0;
        
       
        while(st.isEmpty()==false) 
        {
            int u=st.pop();
            if(dist[u]!=Integer.MAX_VALUE)
            {
              for(int v:adj.get(u))
              {
                if(dist[v]>dist[u]+weight(u,v))
                dist[v]=dist[u]+weight(u,v);                          // incomplete
              }
            
            }
        }
        
      return dist; 
    }
}
