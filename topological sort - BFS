class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int indegree[]=new int [V];
        int res[]=new int[V];
       int k=0;
        Queue<Integer>q=new LinkedList<>();
        
       // calculating indegree ( list mein agar koi bhi adjcent hai ek node ke matlab uska indegrree hai)
       //step -1
        for(int i=0;i<V;i++)
        {
         for (int j:adj.get(i))
         {
             indegree[j]++;
         }
        }
        
        //step 2- enque those with indegree 0
        for(int i=0;i<V;i++)
        {
            if(indegree[i]==0)
            q.add(i);
        }
        // simply run bfs
        while(q.isEmpty()==false)
        {
            int u=q.poll();
            res[k++]=u;
            
            for(int v:adj.get(u))
            {// indegree =indegree -1 of adjcent elements
                indegree[v]--;
                // if indegree ==0 , enque it
                if(indegree[v]==0)
                q.add(v);
            }
        }
        return res;
    }
    
}
