//  just one change we have to find shortest dist from source to all other vertices-> dijikstra

//(key[v],key[u]+graph[u][v]) -> change we have to do 

 // shortest dist from one vertex to another vertex ( shortest dist from source to detination) -> prism


import java.util.*; 
import java.lang.*; 
import java.io.*; 

class Gfg { 
	
    int V; // no of vertices
	
    public static int []dijikstra(int graph[][],int s) 
    { 
      
    	
      int[] key=new int[V]; // key[]=dist[]
    	
      Arrays.fill(key,Integer.MAX_VALUE);
    	
      key[s]=0;// dist of source to source =0
      
      boolean[] vis=new boolean[V]; 
    
    	for (int count = 0; count < V-1 ; count++) 
    	{ 
    		int u = -1;
    
    		    for(int i=0;i<V;i++)  
    		    {
    		        if(!mSet[i]&&(u==-1||key[i]<key[u])) 
    		        u=i; 
    		    }
    	   vis[u] = true; 
    	 for (int v = 0; v < V; v++) 
                {
                if (graph[u][v]!=0 && vis[v] == false) 
    				    key[v] = Math.min(key[v],key[u]+graph[u][v]); // relaxation
    	
                }
                
        } 
        return key;
    } 

	public static void main(String[] args) 
	{  
		Scanner x=new Scanner(System.in);
    V=x.nextInt();// no of vertices
   
   
   
   for(int i=0;i<V;i++)
    {
      for(int j=0;j<V;j++)
       {
          x.nextInt(graph[i][j]);
        }
    }
    System.out.println("enter source vertex");
    int s=x.nextInt();
    
   //int graph[][] = new int[][] { { 0, 5, 8, 0}, 
    //						{ 5, 0, 10, 15 }, 
    	//					{ 8, 10, 0, 20 }, 
    		//				{ 0, 15, 20, 0 },};  

		System.out.print(dijikstra(graph,s)); 
	} 
} 
