//Given a grid consisting of '0's(Water) and '1's(Land). Find the number of islands.
//Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.



class Solution
{
    //Function to find the number of islands.
    public int numIslands(char[][] grid)
    {int islands=0;
     int row=grid.length;
     int col=grid[0].length;
     
     for(int i=0;i<row;i++)
     {
         for(int j=0;j<col;j++)
         {
             if(grid[i][j]=='1')// means land
             {
                 dfs(grid,i,j,row,col);// dfs recursive call
                 islands++;
             }
         }
     }
     return islands;
    }
    void dfs(char grid[][],int i,int j,int row,int col)
    {
        if(i<0||i>=row||j<0||j>=col||grid[i][j]!='1')// boundary cond
        return;
        grid[i][j]='2';// if its land then make it visited by putting '2'
       
       // now call in all 8 directions( depends on the ques)
       
       dfs(grid,i-1,j,row,col);//up
        dfs(grid,i,j+1,row,col);//right
         dfs(grid,i,j-1,row,col);//left
          dfs(grid,i+1,j,row,col);//down
          dfs(grid,i+1,j+1,row,col);//right diag(up-> down)
          dfs(grid,i-1,j-1,row,col);//right diag(down-> up)
           dfs(grid,i-1,j+1,row,col);//left diag(up-> down)
            dfs(grid,i+1,j-1,row,col);//left diag(down->up)
       
    }
        
}    
