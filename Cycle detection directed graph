// stackoverflow error comes

class Solution 
{
    //Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj)
    {
      boolean vis[]=new boolean[V+1];
      boolean recstack[]=new boolean[V+1];
        for(int i=0;i<V;i++)
        {
            if(vis[i]==false)
            {// make dfs call
                if(detectcycle(adj,vis,recstack,i)==true)// (list,vis array, source,parent)
                    return true;
            }
        }
        return false;
     
        
    }

boolean detectcycle(ArrayList<ArrayList<Integer>> adj,boolean vis[],boolean recstack[],int s)
    {// detectcycle function is nothing but dfs traversal
        
        vis[s]=true;// make source visited
        recstack[s]=true;// recursion stack true
        
        for(int u:adj.get(s))// check its adjcent
        {
            if(vis[u]==false)// if not vis make dfs call
            {
                if(detectcycle(adj,vis,recstack,s)==true)
                    return true;
                    
            }// if vis and recursion stack is true that means cycle detected
            else if(recstack[u]==true)
            return true; 
        }
        recstack[s]=false;
        return false;
    }
}


// 2->> topological method
// just add count variable and if count != no of vertices then cycle detected or else no cycle detected


class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {   int count=0;
        int indegree[]=new int [V];
        int res[]=new int[V];
       int k=0;
        Queue<Integer>q=new LinkedList<>();
        
       // calculating indegree ( list mein agar koi bhi adjcent hai ek node ke matlab uska indegrree hai)
       //step -1
        for(int i=0;i<V;i++)
        {
         for (int j:adj.get(i))
         {
             indegree[j]++;
         }
        }
        
        //step 2- enque those with indegree 0
        for(int i=0;i<V;i++)
        {
            if(indegree[i]==0)
            q.add(i);
        }
        // simply run bfs
        while(q.isEmpty()==false)
        {
            int u=q.poll();
            res[k++]=u;
            
            for(int v:adj.get(u))
            {// indegree =indegree -1 of adjcent elements
                indegree[v]--;
                // if indegree ==0 , enque it
                if(indegree[v]==0)
                q.add(v);
                
            }
            // step 3
            count++;
        }
        return(count!=V);
        
        
      
    }
    
}
